// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// library

// importing code straight from github/npm package
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

library PriceConverter {


    function getPrice() internal view returns(uint256) {
        // ABI
        // address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e (goerli address for eth - usd)
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);
        // we are going to assume that all in this contract of adress "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e" will have all the functionalilties of AggregatorV3Interface

        // price below is the price of ETH in term of USD
        (,int price,,,) = priceFeed.latestRoundData();
        
        return uint256(price * 1e10); // 1 * 10 == 10000000000
    }

    function getVersion() public view returns (uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);
        return priceFeed.version();
    }

    function getConversionRate(uint256 ethAmount) internal view returns (uint256) {
        uint256 ethPrice = getPrice();
        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // always want to mutiply before you divide
        return ethAmountInUsd;
    }

}
